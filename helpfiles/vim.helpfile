# Tag the current line as a certain markdown heading level
? vim,markdown,mapping

$ nnoremap <Leader>u1 yypVr=
$ nnoremap <Leader>u2 yypVr-
$ nnoremap <Leader>u3 ^i### <esc>
$ nnoremap <Leader>u4 ^i#### <esc>
$ nnoremap <Leader>u5 ^i##### <esc>
--

# Set a smash escape sequence
? vim,mapping

> Smash escapes make it a little easier to get back
> to normal mode (especially on a Macbook Pro...)

$ inoremap fd <esc>
$ vnoremap fd <esc>
$ nnoremap fd <esc>
--

# Oh no! I need sudo to save this file...
? vim,sudo,fail,save

> This works as one time command in a pinch but it is worthwhile saving in your
> vimrc on your host as well in case you run into this situation again. To use
> the command as a one time thing,

$ %!sudo tee > /dev/null %
$ # Or to save for later use (:w!! from normal mode)
$ cmap w!! %!sudo tee > /dev/null %
--

# The file you are editing has giant lines and j/k is borked
? vim,navigation,hjkl,mapping

> By default, vim will navigate according to the lines in the source file, not
> the _visual_ lines you see in the editor itself. These mappings forces j/k to
> always move one visual line at a time.

$ nnoremap j gj
$ nnoremap k gk
--

# Quickly insert a line above/below the cursor
? vim,mapping,insert

> This will allow you to quickly pad blank lines above / below your current
> cursor position and still retain the use of t in commands such as 'dt)'

$ nmap t o<ESC>k  " insert a blank line below
$ nmap T o<ESC>j  " insert a blank line above
--

# Retain selection when indenting lines
? vim,indent,mapping,behaviour

> Normally when you indent/dedent a block, vim will drop your visual selection
> (which is a pain if you are wanting to indent multiple times). This mapping
> simply re-selects the previous visual selection after indenting.

$ vnoremap < <gv
$ vnoremap > >gv
--

# Auto enable spellcheck for certain filetypes
? vim,spellcheck,autocommand

> This can be done based on the filetype that vim detects when the buffer is
> loaded or by the file extension of the file that is opened.

$ au FileType gitcommit,markdown setlocal spell
$ au BufRead *.md setlocal spell
$ au BufRead *.markdown setlocal spell
$ au BufRead *.txt setlocal spell
--

# Add an abbreviation for common errors/boilerplate that you type all the time
? binding,shortcut,snippet
% https://vim.fandom.com/wiki/Using_abbreviations

> There are two main ways of defining an abbreviation in your vimrc:
>  ab <key sequence> <replacement>  // This will fire any time you type the sequence
>  ia <key sequence> <replacement>  // This will only fire when you are in insert mode
>
> NOTE: You will need to hit <space> after typing your abbreviation to trigger the insert.

$ // example: add a TODO checkbox
$ ia ;' - [ ]
--

# Add a new snippet to a 'k' helpfile
? k,binding,abbreviation
% https://github.com/sminez/k

> Add the following to your vimrc to create a new abbreviation that will stub
> out a new snippet entry and place your cursor at the title line. Typing `][s`
> and then hitting space will insert the snippet. Using `ia` instead of `ab` to
> define the abbreviation means that it will only work when in insert mode.

$ ia ][s # <CR>? <CR>%<CR><CR>> <CR><CR>$ <CR>--<ESC>?#<CR>a
--

# Adding custom sytax highlighting for a new filetype
? eye-candy,ui,syntax
% https://vim.fandom.com/wiki/Creating_your_own_syntax_files

> The example outlined in this site is a good starting point if you want to
> create your own syntax file. You will need to ensure that you also associate
> the filetype with your new syntax file: there is a "correct" way to do this
> and then there is a "just make it work" way of doing it. The latter involves
> simply adding the following to your vimrc:

$ au BufRead,BufNewFile   *.<ext> set filetype=<name in the syntax file>

> You can also run the following in vim to see how which syntax groups there
> are and how they are displayed in your current theme:
--

# Toggle case of the current selection / at cursor
? keybinding,built-in
% http://vimcommands.github.io/

> Simply hitting '~' while in Normal or Visual mode will toggle the case of
> all characters highlighted.
--

# Increment / decrement a number in a file
? built-in,keybinding
% http://vimcommands.github.io/

> C-a and C-x increment/decrement the number under cursor respectively
--
